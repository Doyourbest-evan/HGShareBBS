<#@ assembly name="System.Data.dll" #>
<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#+
    public class DbHelper
    {
		public Config _config{ get;set;}

		public DbHelper(Config config)
        {
			_config=config;
		}
        #region GetDbTables
        
		/// <summary>
		/// 获取所有表
		/// </summary>
        public List<DbTable> GetDbTables(string tables = null)
        {
            
            if (!string.IsNullOrEmpty(tables))
            {
                tables = string.Format(" and obj.name in ('{0}')", tables.Replace(",", "','"));
            }
            #region SQL
            string sql = string.Format(@"SELECT
                                    obj.name tablename,
                                    schem.name schemname,
                                    idx.rows,
                                    CAST
                                    (
                                        CASE 
                                            WHEN (SELECT COUNT(1) FROM sys.indexes WHERE object_id= obj.OBJECT_ID AND is_primary_key=1) >=1 THEN 1
                                            ELSE 0
                                        END 
                                    AS BIT) HasPrimaryKey                                         
                                    from {0}.sys.objects obj 
                                    inner join {0}.dbo.sysindexes idx on obj.object_id=idx.id and idx.indid<=1
                                    INNER JOIN {0}.sys.schemas schem ON obj.schema_id=schem.schema_id
                                    where type='U' {1}
                                    order by obj.name", _config.DbDatabase, tables);
            #endregion
            DataTable dt = GetDataTable(_config.ConnectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new DbTable
            {
                TableName = row.Field<string>("tablename").Replace("_",""),
                OldTableName = row.Field<string>("tablename"),
                SchemaName = row.Field<string>("schemname"),
                Rows = row.Field<int>("rows"),
                HasPrimaryKey = row.Field<bool>("HasPrimaryKey")
            }).ToList();
        }
        #endregion

        #region GetDbColumns
        /// <summary>
		/// 获取所有列
		/// </summary>
        public  List<DbColumn> GetDbColumns(string tableName, string schema = "dbo")
        {
            #region SQL
            string sql = string.Format(@"
                                    WITH indexCTE AS
                                    (
                                        SELECT 
                                        ic.column_id,
                                        ic.index_column_id,
                                        ic.object_id    
                                        FROM {0}.sys.indexes idx
                                        INNER JOIN {0}.sys.index_columns ic ON idx.index_id = ic.index_id AND idx.object_id = ic.object_id
                                        WHERE  idx.object_id =OBJECT_ID(@tableName) AND idx.is_primary_key=1
                                    )
                                    select
                                    colm.column_id ColumnID,
                                    CAST(CASE WHEN indexCTE.column_id IS NULL THEN 0 ELSE 1 END AS BIT) IsPrimaryKey,
                                    colm.name ColumnName,
                                    systype.name ColumnType,
                                    colm.is_identity IsIdentity,
                                    colm.is_nullable IsNullable,
                                    cast(colm.max_length as int) ByteLength,
                                    (
                                        case 
                                            when systype.name='nvarchar' and colm.max_length>0 then colm.max_length/2 
                                            when systype.name='nchar' and colm.max_length>0 then colm.max_length/2
                                            when systype.name='ntext' and colm.max_length>0 then colm.max_length/2 
                                            else colm.max_length
                                        end
                                    ) CharLength,
                                    cast(colm.precision as int) Precision,
                                    cast(colm.scale as int) Scale,
                                    prop.value Remark
                                    from {0}.sys.columns colm
                                    inner join {0}.sys.types systype on colm.system_type_id=systype.system_type_id and colm.user_type_id=systype.user_type_id
                                    left join {0}.sys.extended_properties prop on colm.object_id=prop.major_id and colm.column_id=prop.minor_id
                                    LEFT JOIN indexCTE ON colm.column_id=indexCTE.column_id AND colm.object_id=indexCTE.object_id                                        
                                    where colm.object_id=OBJECT_ID(@tableName)
                                    order by colm.column_id", _config.DbDatabase);
            #endregion
            SqlParameter param = new SqlParameter("@tableName", SqlDbType.NVarChar, 100) { Value = string.Format("{0}.{1}.{2}", _config.DbDatabase, schema, tableName) };
            DataTable dt = GetDataTable(_config.ConnectionString, sql, param);
            return dt.Rows.Cast<DataRow>().Select(row => new DbColumn()
            {
                ColumnID = row.Field<int>("ColumnID"),
                IsPrimaryKey = row.Field<bool>("IsPrimaryKey"),
                ColumnName = row.Field<string>("ColumnName").Replace("_",""),
                OldColumnName = row.Field<string>("ColumnName"),
                ColumnType = row.Field<string>("ColumnType"),
                IsIdentity = row.Field<bool>("IsIdentity"),
                IsNullable = row.Field<bool>("IsNullable"),
                ByteLength = row.Field<int>("ByteLength"),
                CharLength = row.Field<int>("CharLength"),
                Scale = row.Field<int>("Scale"),
                Remark = row["Remark"].ToString()
            }).ToList();
        }
        #endregion     

		

        #region 执行sql语句返回datatable
		/// <summary>
		/// 执行sql语句返回datatable
		/// </summary>
        public static DataTable GetDataTable(string connectionString, string commandText, params SqlParameter[] parms)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = connection.CreateCommand();
                command.CommandText = commandText;
                command.Parameters.AddRange(parms);
                SqlDataAdapter adapter = new SqlDataAdapter(command);

                DataTable dt = new DataTable();
                adapter.Fill(dt);

                return dt;
            }
        }
        #endregion

		/// <summary>
		/// 获取所有字段 拼接
		/// </summary>
		public static string GetFileds(List<DbColumn> columns,string prestr="",string laststr="")
        {
			System.Text.StringBuilder sb=new System.Text.StringBuilder();
			foreach(DbColumn item in columns){
				sb.AppendFormat("{0}{1}{2},",prestr,item.ColumnName,laststr);
			}
			return sb.ToString().TrimEnd(',');
		}
		/// <summary>
		/// 获取除自增列所有字段 拼接
		/// </summary>
		public static string GetNoIsIdentityFileds(List<DbColumn> columns,string prestr="",string laststr="")
        {
			return GetFileds(columns.Where(n=>!n.IsIdentity).ToList(),prestr,laststr);
		}
		/// <summary>
		/// 获取主键列
		/// </summary>
		public static DbColumn GetPrimaryKey(List<DbColumn> columns)
        {
			var pk=columns.Where(n=>n.IsPrimaryKey).FirstOrDefault();
			return pk;
		}
    }
	#region 数据库配置
	/// <summary>
	/// 数据库配置
	/// </summary>
	public class Config
    {
		/// <summary>
		/// 数据库链接
		/// </summary>
		public string ConnectionString{ get;set;}
		/// <summary>
		/// 数据库名
		/// </summary>
		public string DbDatabase{get;set;}
	}

	#endregion


    #region DbTable
    /// <summary>
    /// 表结构
    /// </summary>
    public sealed class DbTable
    {
        /// <summary>
        /// 表名称
        /// </summary>
        public string TableName { get; set; }
		public string OldTableName{ get;set;}
        /// <summary>
        /// 表的架构
        /// </summary>
        public string SchemaName { get; set; }
        /// <summary>
        /// 表的记录数
        /// </summary>
        public int Rows { get; set; }

        /// <summary>
        /// 是否含有主键
        /// </summary>
        public bool HasPrimaryKey { get; set; }

    }
    #endregion

    #region DbColumn
    /// <summary>
    /// 表字段结构
    /// </summary>
    public sealed class DbColumn
    {
        /// <summary>
        /// 字段ID
        /// </summary>
        public int ColumnID { get; set; }

        /// <summary>
        /// 是否主键
        /// </summary>
        public bool IsPrimaryKey { get; set; }

        /// <summary>
        /// 字段名称
        /// </summary>
        public string ColumnName { get; set; }
		public string OldColumnName{ get;set;}
        /// <summary>
        /// 字段类型
        /// </summary>
        public string ColumnType { get; set; }

        /// <summary>
        /// 数据库类型对应的C#类型
        /// </summary>
        public string CSharpType
        {
            get
            {
                return SqlServerDbTypeMap.MapCsharpType(ColumnType);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public Type CommonType
        {
            get
            {
                return SqlServerDbTypeMap.MapCommonType(ColumnType);
            }
        }
		// <summary>
        /// 
        /// </summary>
        public string DbType
        {
            get
            {
                return SqlServerDbTypeMap.MapDbType(ColumnType);
            }
        }
        /// <summary>
        /// 字节长度
        /// </summary>
        public int ByteLength { get; set; }

        /// <summary>
        /// 字符长度
        /// </summary>
        public int CharLength { get; set; }
		/// <summary>
        /// 数据类型+（长度）
        /// </summary>
		public string TypeWinthLength
		{
			get
			{
				return this.ColumnType+(SqlServerDbTypeMap.IsNeedShowLength(this.ColumnType)?"("+this.ByteLength+")":"");
			}
		}

        /// <summary>
        /// 小数位
        /// </summary>
        public int Scale { get; set; }

        /// <summary>
        /// 是否自增列
        /// </summary>
        public bool IsIdentity { get; set; }

        /// <summary>
        /// 是否允许空
        /// </summary>
        public bool IsNullable { get; set; }

        /// <summary>
        /// 描述
        /// </summary>
        public string Remark { get; set; }

		public bool IsString{ get{
		return this.CSharpType.ToLower()=="string";
		}}
    }
    #endregion

    #region SqlServerDbTypeMap

    public class SqlServerDbTypeMap
    {
        public static string MapCsharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            string csharpType = "object";
            switch (dbtype)
            {
                case "bigint": csharpType = "long"; break;
                case "binary": csharpType = "byte[]"; break;
                case "bit": csharpType = "bool"; break;
                case "char": csharpType = "string"; break;
                case "date": csharpType = "DateTime"; break;
                case "datetime": csharpType = "DateTime"; break;
                case "datetime2": csharpType = "DateTime"; break;
                case "datetimeoffset": csharpType = "DateTimeOffset"; break;
                case "decimal": csharpType = "decimal"; break;
                case "float": csharpType = "double"; break;
                case "image": csharpType = "byte[]"; break;
                case "int": csharpType = "int"; break;
                case "money": csharpType = "decimal"; break;
                case "nchar": csharpType = "string"; break;
                case "ntext": csharpType = "string"; break;
                case "numeric": csharpType = "decimal"; break;
                case "nvarchar": csharpType = "string"; break;
                case "real": csharpType = "Single"; break;
                case "smalldatetime": csharpType = "DateTime"; break;
                case "smallint": csharpType = "short"; break;
                case "smallmoney": csharpType = "decimal"; break;
                case "sql_variant": csharpType = "object"; break;
                case "sysname": csharpType = "object"; break;
                case "text": csharpType = "string"; break;
                case "time": csharpType = "TimeSpan"; break;
                case "timestamp": csharpType = "byte[]"; break;
                case "tinyint": csharpType = "byte"; break;
                case "uniqueidentifier": csharpType = "Guid"; break;
                case "varbinary": csharpType = "byte[]"; break;
                case "varchar": csharpType = "string"; break;
                case "xml": csharpType = "string"; break;
                default: csharpType = "object"; break;
            }
            return csharpType;
        }
           
        public static Type MapCommonType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return Type.Missing.GetType();
            dbtype = dbtype.ToLower();
            Type commonType = typeof(object);
            switch (dbtype)
            {
                case "bigint": commonType = typeof(long); break;
                case "binary": commonType = typeof(byte[]); break;
                case "bit": commonType = typeof(bool); break;
                case "char": commonType = typeof(string); break;
                case "date": commonType = typeof(DateTime); break;
                case "datetime": commonType = typeof(DateTime); break;
                case "datetime2": commonType = typeof(DateTime); break;
                case "datetimeoffset": commonType = typeof(DateTimeOffset); break;
                case "decimal": commonType = typeof(decimal); break;
                case "float": commonType = typeof(double); break;
                case "image": commonType = typeof(byte[]); break;
                case "int": commonType = typeof(int); break;
                case "money": commonType = typeof(decimal); break;
                case "nchar": commonType = typeof(string); break;
                case "ntext": commonType = typeof(string); break;
                case "numeric": commonType = typeof(decimal); break;
                case "nvarchar": commonType = typeof(string); break;
                case "real": commonType = typeof(Single); break;
                case "smalldatetime": commonType = typeof(DateTime); break;
                case "smallint": commonType = typeof(short); break;
                case "smallmoney": commonType = typeof(decimal); break;
                case "sql_variant": commonType = typeof(object); break;
                case "sysname": commonType = typeof(object); break;
                case "text": commonType = typeof(string); break;
                case "time": commonType = typeof(TimeSpan); break;
                case "timestamp": commonType = typeof(byte[]); break;
                case "tinyint": commonType = typeof(byte); break;
                case "uniqueidentifier": commonType = typeof(Guid); break;
                case "varbinary": commonType = typeof(byte[]); break;
                case "varchar": commonType = typeof(string); break;
                case "xml": commonType = typeof(string); break;
                default: commonType = typeof(object); break;
            }
            return commonType;
        }

		public static string MapDbType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
			dbtype=dbtype.ToLower();
            switch (dbtype)
            {
				case "bigint" :  return "Int64";
				case "binary" :  return "Binary";
				case "bit" :  return "Boolean";
				case "char" :  return "AnsiStringFixedLength";
				case "datetime" :  return "DateTime";
				case "decimal" :  return "Decimal";
				case "float" :  return "Double";
				case "image" :  return "Binary";
				case "int" :  return "Int32";
				case "money" :  return "Currency";
				case "nchar" :  return "StringFixedLength";
				case "ntext" :  return "String";
				case "nvarchar" :  return "String";
				case "real" :  return "Single";
				case "uniqueidentifier" :  return "Guid";
				case "smalldatetime" :  return "DateTime";
				case "smallint" :  return "Int16";
				case "smallmoney" :  return "Currency";
				case "text" :  return "AnsiString";
				case "timestamp" :  return "Binary";
				case "tinyint" :  return "Byte";
				case "varbinary" :  return "Binary";
				case "varchar" :  return "AnsiString";
				case "variant" :  return "Object";
				case "xml" :  return "Xml";
				case "udt" :  return "Object";
				case "structured" :  return "Object";
				case "date" :  return "Date";
				case "time" :  return "Time";
				case "datetime2" :  return "DateTime2";
				case "datetimeoffset" :  return "DateTimeOffset";
                default: return "object"; break;
            }
        }
		/// <summary>
        /// 是否需要显示长度
        /// </summary>
		public static bool IsNeedShowLength(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return false;
			dbtype=dbtype.ToLower();
            switch (dbtype)
            {
				case "char" :  return true;
				case "decimal" :  return true;
				case "float" :  return true;
				case "image" :  return true;
				case "money" :  return true;
				case "nchar" :  return true;
				case "ntext" :  return true;
				case "nvarchar" :  return true;
				case "real" :  return true;
				case "uniqueidentifier" :  return true;
				case "smallmoney" :  return true;
				case "varbinary" :  return true;
				case "varchar" :  return true;
				case "variant" :  return true;
				case "xml" :  return true;
				case "udt" :  return true;
				case "structured" :  return true;
				case "date" :  return true;
                default: return false; break;
            }
        }
    }
    #endregion
    

#>